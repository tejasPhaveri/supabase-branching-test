name: Staging Deployment

on:
  push:
    branches: ["staging"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: preview

    env:
      # Prisma database URLs for staging
      DATABASE_URL: ${{ secrets.STAGING_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.STAGING_DIRECT_URL }}
      ALLOW_DESTRUCTIVE: ${{ secrets.STAGING_ALLOW_DESTRUCTIVE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Prisma generate
        run: npx prisma generate

      - name: Validate expand-contract pattern
        run: |
          chmod +x .github/scripts/check-expand-contract.sh
          .github/scripts/check-expand-contract.sh

      - name: Check migrations for data preservation compliance
        shell: bash
        run: |
          set -euo pipefail
          echo "üîç Scanning migrations for data preservation compliance..."
          
          # 1. Check for destructive DDL patterns
          echo "Checking for destructive DDL operations..."
          pattern_drop='\\bDROP[[:space:]]+TABLE\\b|\\bDROP[[:space:]]+COLUMN\\b|\\bDROP[[:space:]]+CONSTRAINT\\b|\\bTRUNCATE\\b|\\bALTER[[:space:]]+TABLE[^;]*\\bDROP\\b'
          pattern_drop_with_cascade='(DROP[[:space:]]+TABLE|DROP[[:space:]]+CONSTRAINT|ALTER[[:space:]]+TABLE[^;]*DROP)[^;]*\\bCASCADE\\b'
          
          destructive_found=0
          if grep -Eirn --with-filename "${pattern_drop}" prisma/migrations/*/migration.sql; then
            destructive_found=1
          fi
          if grep -Eirn --with-filename "${pattern_drop_with_cascade}" prisma/migrations/*/migration.sql; then
            destructive_found=1
          fi
          
          # 2. Check for risky rename operations without proper data migration
          echo "Checking for potentially unsafe column renames..."
          risky_patterns='\\bALTER[[:space:]]+TABLE[^;]*RENAME[[:space:]]+COLUMN\\b'
          rename_found=0
          if grep -Eirn --with-filename "${risky_patterns}" prisma/migrations/*/migration.sql; then
            echo "‚ö†Ô∏è RENAME COLUMN detected - ensure data is preserved!"
            rename_found=1
          fi
          
          # 3. Check for ALTER COLUMN without default values for existing data
          echo "Checking for column alterations that might affect existing data..."
          alter_patterns='\\bALTER[[:space:]]+COLUMN[^;]*NOT[[:space:]]+NULL\\b'
          alter_found=0
          if grep -Eirn --with-filename "${alter_patterns}" prisma/migrations/*/migration.sql; then
            echo "‚ö†Ô∏è ALTER COLUMN NOT NULL detected - ensure existing data compatibility!"
            alter_found=1
          fi
          
          # Decision logic
          if [ "$destructive_found" -eq 1 ]; then
            if [ "${ALLOW_DESTRUCTIVE:-}" != "true" ]; then
              echo "‚ùå BLOCKED: Destructive DDL detected. This could cause DATA LOSS."
              echo "If this is intentional (expand-contract pattern step 3):"
              echo "1. Verify data has been migrated to new schema"
              echo "2. Set STAGING_ALLOW_DESTRUCTIVE=true"
              echo "3. Document the data migration in your PR"
              exit 1
            else
              echo "‚ö†Ô∏è DESTRUCTIVE DDL APPROVED: Proceeding with STAGING_ALLOW_DESTRUCTIVE=true"
            fi
          fi
          
          if [ "$rename_found" -eq 1 ] || [ "$alter_found" -eq 1 ]; then
            echo "‚ö†Ô∏è POTENTIALLY RISKY OPERATIONS detected."
            echo "Ensure you're following the expand-contract pattern:"
            echo "1. Expand: Add new columns alongside old ones"
            echo "2. Migrate: Transform data from old to new schema"
            echo "3. Contract: Remove old columns (requires STAGING_ALLOW_DESTRUCTIVE=true)"
          fi
          
          if [ "$destructive_found" -eq 0 ] && [ "$rename_found" -eq 0 ] && [ "$alter_found" -eq 0 ]; then
            echo "‚úÖ Migrations appear safe for data preservation"
          fi

      - name: Pre-migration backup check
        run: |
          echo "üíæ Verifying backup strategy before migration..."
          echo "Ensure you have recent backups before proceeding with schema changes"
          echo "Supabase provides automatic daily backups, but consider manual backup for critical changes"
          echo "Proceeding with migration to staging environment..."

      - name: Apply Prisma migrations (deploy)
        run: |
          echo "üöÄ Applying Prisma migrations to STAGING database..."
          npx prisma migrate deploy

      - name: Verify migration status
        run: |
          echo "‚úÖ Verifying Prisma migration status..."
          npx prisma migrate status

      - name: Post-migration data integrity check
        run: |
          echo "üîç Running post-migration data integrity checks..."
          echo "Verifying database connection and basic queries..."
          npx prisma studio --port 5555 &
          STUDIO_PID=$!
          sleep 2
          kill $STUDIO_PID || true
          echo "‚úÖ Database connection verified"
          echo "Manual verification recommended:"
          echo "1. Check row counts in affected tables"
          echo "2. Verify data integrity constraints"
          echo "3. Test application functionality with new schema"
