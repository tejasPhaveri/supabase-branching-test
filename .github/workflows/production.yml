name: Production Deployment

on:
  push:
    branches: ["main", "production"]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    environment: production

    env:
      # Supabase CLI environment variables for production
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
      SUPABASE_PROJECT_ID: ${{ secrets.PRODUCTION_PROJECT_ID }}
      SUPABASE_DB_PASSWORD: ${{ secrets.PRODUCTION_DB_PASSWORD }}
      
      # Prisma database URLs for production
      DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
      DIRECT_URL: ${{ secrets.PRODUCTION_DIRECT_URL }}
      ALLOW_DESTRUCTIVE: ${{ secrets.PRODUCTION_ALLOW_DESTRUCTIVE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Link to Supabase Production Project
        run: |
          echo "Linking to production Supabase project..."
          supabase link --project-ref $SUPABASE_PROJECT_ID

      - name: Prisma generate
        run: npx prisma generate

      - name: Check Supabase migration status
        run: |
          echo "Checking Supabase migration status for production..."
          supabase migration list

      - name: Check Prisma migration status
        run: |
          echo "Checking current Prisma migration status..."
          npx prisma migrate status

      - name: Check migrations for destructive SQL
        shell: bash
        run: |
          set -euo pipefail
          echo "Scanning prisma/migrations for destructive DDL (drops/truncate only)..."
          # Combine patterns that truly remove schema or purge data.
          # - DROP TABLE
          # - DROP COLUMN
          # - DROP CONSTRAINT
          # - ALTER TABLE ... DROP ...
          # - TRUNCATE
          # - Optional CASCADE only when paired with a DROP/ALTER DROP (not FK ON DELETE/UPDATE CASCADE)
          pattern_drop='\\bDROP[[:space:]]+TABLE\\b|\\bDROP[[:space:]]+COLUMN\\b|\\bDROP[[:space:]]+CONSTRAINT\\b|\\bTRUNCATE\\b|\\bALTER[[:space:]]+TABLE[^;]*\\bDROP\\b'
          pattern_drop_with_cascade='(DROP[[:space:]]+TABLE|DROP[[:space:]]+CONSTRAINT|ALTER[[:space:]]+TABLE[^;]*DROP)[^;]*\\bCASCADE\\b'
          
          found=0
          # Flag lines that match any destructive pattern
          if grep -Eirn --with-filename "${pattern_drop}" prisma/migrations/*/migration.sql; then
            found=1
          fi
          # Explicitly also catch DROP ... CASCADE forms
          if grep -Eirn --with-filename "${pattern_drop_with_cascade}" prisma/migrations/*/migration.sql; then
            found=1
          fi

          if [ "$found" -eq 1 ]; then
            if [ "${ALLOW_DESTRUCTIVE:-}" != "true" ]; then
              echo "‚ùå PRODUCTION SAFETY: Destructive DDL detected (DROP/TRUNCATE/ALTER ... DROP). Blocked for production safety."
              echo "To proceed with destructive changes in production:"
              echo "1. Review the changes thoroughly"
              echo "2. Ensure you have recent backups"
              echo "3. Set PROD_ALLOW_DESTRUCTIVE=true in GitHub environment secrets"
              echo "4. Document the reasoning in the deployment notes"
              exit 1
            else
              echo "‚ö†Ô∏è  PRODUCTION WARNING: Destructive DDL detected but PROD_ALLOW_DESTRUCTIVE=true ‚Äî proceeding as approved."
              echo "Ensure proper backups and rollback plans are in place."
            fi
          else
            echo "‚úÖ No destructive DDL detected. Safe to proceed."
          fi

      - name: Dry run migration check
        run: |
          echo "Performing dry-run check to preview migrations..."
          npx prisma migrate diff --from-url="${DATABASE_URL}" --to-schema-datamodel=prisma/schema.prisma --shadow-database-url="${DIRECT_URL}_shadow" || echo "Migration diff completed"

      - name: Deploy Supabase migrations
        run: |
          echo "üöÄ Deploying Supabase migrations to PRODUCTION..."
          supabase db push --include-all

      - name: Apply Prisma migrations (deploy)
        run: |
          echo "üöÄ Applying Prisma migrations to PRODUCTION database..."
          npx prisma migrate deploy

      - name: Verify migration status
        run: |
          echo "‚úÖ Verifying final Supabase migration status..."
          supabase migration list
          echo "‚úÖ Verifying final Prisma migration status..."
          npx prisma migrate status